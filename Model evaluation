#################### Choosing a model (except neural networks(NN))

model <- readRDS("NewestRF.RDS")

# NN is instead:
library(keras)
library(tfdatasets)
library(caret)
model <- load_model_hdf5("NewestNN.h5")

################### Observed datasets

Uppsala.data <- readRDS("Uppsala.data.RDS")
Leuven.data <- readRDS("Leuven.data.RDS")
ProTECT.data <- readRDS("ProTECT.data.RDS")
Uppsala.observed.gose <- as.integer(as.vector(Uppsala.data$TestSet$eGOS))
Leuven.observed.gose <- as.integer(as.vector(Leuven.data$eGOS))
ProTECT.observed.gose <- as.integer(as.vector(ProTECT.data$eGOS))

################### Data processing depending on model
# Linear regression:
# Uppsala.data$TestSet$age <- as.numeric(Uppsala.data$TestSet$age)
# Uppsala.data$TestSet$pupil <- as.factor(Uppsala.data$TestSet$pupil)
# Uppsala.data$TestSet$motor <- as.factor(Uppsala.data$TestSet$motor)
# Uppsala.data$TestSet$CT <- as.factor(Uppsala.data$TestSet$CT)
# Uppsala.data$TestSet$eGOS <- as.numeric(Uppsala.data$TestSet$eGOS)
# 
# Leuven.data$age <- as.numeric(Leuven.data$age)
# Leuven.data$pupil <- as.factor(Leuven.data$pupil)
# Leuven.data$motor <- as.factor(Leuven.data$motor)
# Leuven.data$CT <- as.factor(Leuven.data$CT)
# Leuven.data$eGOS <- as.numeric(Leuven.data$eGOS)
# 
# ProTECT.data$age <- as.numeric(ProTECT.data$age)
# ProTECT.data$pupil <- as.factor(ProTECT.data$pupil)
# ProTECT.data$motor <- as.factor(ProTECT.data$motor)
# ProTECT.data$CT <- as.factor(ProTECT.data$CT)
# ProTECT.data$eGOS <- as.numeric(ProTECT.data$eGOS)
# 
# Uppsala.predicted.gose <- predict(model, Uppsala.data$TestSet)
# Uppsala.predicted.gose <- as.integer(pmax(Uppsala.predicted.gose, 1))
# Leuven.predicted.gose <- predict(model, Leuven.data)
# Leuven.predicted.gose <- as.integer(pmax(Leuven.predicted.gose, 1))
# ProTECT.predicted.gose <- predict(model, ProTECT.data)
# ProTECT.predicted.gose <- as.integer(pmax(ProTECT.predicted.gose, 1))

# POLR:
library(MASS)
# Uppsala.data$TestSet$age <- as.numeric(Uppsala.data$TestSet$age)
# Uppsala.data$TestSet$pupil <- as.factor(Uppsala.data$TestSet$pupil)
# Uppsala.data$TestSet$motor <- as.factor(Uppsala.data$TestSet$motor)
# Uppsala.data$TestSet$CT <- as.factor(Uppsala.data$TestSet$CT)
# Uppsala.data$TestSet$eGOS <- as.factor(Uppsala.data$TestSet$eGOS)
# 
# Leuven.data$age <- as.numeric(Leuven.data$age)
# Leuven.data$pupil <- as.factor(Leuven.data$pupil)
# Leuven.data$motor <- as.factor(Leuven.data$motor)
# Leuven.data$CT <- as.factor(Leuven.data$CT)
# Leuven.data$eGOS <- as.factor(Leuven.data$eGOS)
# 
# ProTECT.data$age <- as.numeric(ProTECT.data$age)
# ProTECT.data$pupil <- as.factor(ProTECT.data$pupil)
# ProTECT.data$motor <- as.factor(ProTECT.data$motor)
# ProTECT.data$CT <- as.factor(ProTECT.data$CT)
# ProTECT.data$eGOS <- as.factor(ProTECT.data$eGOS)
# 
# Uppsala.predicted.gose <- as.integer(predict(model, Uppsala.data$TestSet))
# Uppsala.predicted.probabilities <- as.matrix(predict(model, Uppsala.data$TestSet, type = "p"))
# Leuven.predicted.gose <- as.integer(predict(model, Leuven.data))
# Leuven.predicted.probabilities <- as.matrix(predict(model, Leuven.data, type = "p"))
# ProTECT.predicted.gose <- as.integer(predict(model, ProTECT.data))
# ProTECT.predicted.probabilities <- as.matrix(predict(model, ProTECT.data, type = "p"))


# Elastic net:
# Uppsala.predicted.gose <- as.integer(predict(model, s=model$lambda.1se, newx=as.matrix(Uppsala.data$TestSet[, c("motor", "pupil", "age", "CT")])))
# Leuven.predicted.gose <- as.integer(predict(model, s=model$lambda.1se, newx=as.matrix(Leuven.data[, c("motor", "pupil", "age", "CT")])))
# ProTECT.predicted.gose <- as.integer(predict(model, s=model$lambda.1se, newx=as.matrix(ProTECT.data[, c("motor", "pupil", "age", "CT")])))
library(glmnet)
library(ggplot2)

# Elmo: 
# new.x <- as.matrix(Uppsala.data$TestSet[, c("age", "motor", "pupil", "CT")])
# new.x.L <- as.matrix(Leuven.data[, c("age", "motor", "pupil", "CT")])
# new.x.P <- as.matrix(ProTECT.data[, c("age", "motor", "pupil", "CT")])
# Uppsala.predicted.probabilities <- as.matrix(predict(model, new.x))
# colnames(Uppsala.predicted.probabilities) <- c("1", "2", "3", "4", "5", "6", "7", "8")
# Uppsala.predicted.gose <- as.integer(apply((Uppsala.predicted.probabilities), 1, which.max))
# 
# Leuven.predicted.probabilities <- as.matrix(predict(model, new.x.L))
# colnames(Leuven.predicted.probabilities) <- c("1", "2", "3", "4", "5", "6", "7", "8")
# Leuven.predicted.gose <- as.integer(apply((Leuven.predicted.probabilities), 1, which.max))
# 
# ProTECT.predicted.probabilities <- as.matrix(predict(model, new.x.P))
# colnames(ProTECT.predicted.probabilities) <- c("1", "2", "3", "4", "5", "6", "7", "8")
# ProTECT.predicted.gose <- as.integer(apply((ProTECT.predicted.probabilities), 1, which.max))
library(ordinalNet)
library(glmnet)
library(ggplot2)

# Random forest:
library(ggplot2)
library(cowplot)
library(randomForest)

Uppsala.data <- Uppsala.data$TestSet

Uppsala.data$age <- as.numeric(Uppsala.data$age)
Uppsala.data$pupil <- as.factor(Uppsala.data$pupil)
Uppsala.data$motor <- as.factor(Uppsala.data$motor)
Uppsala.data$CT <- as.factor(Uppsala.data$CT)
Uppsala.data <- data.frame(Uppsala.data$age, Uppsala.data$motor, Uppsala.data$pupil, Uppsala.data$CT)
colnames(Uppsala.data) <- c("data.age", "data.motor", "data.pupil", "data.CT")
Uppsala.predicted.gose <- as.integer(as.vector(predict(model, Uppsala.data)))
Uppsala.predicted.probabilities <- predict(model, Uppsala.data, type="prob")

Leuven.data$eGOS <- factor(Leuven.data$eGOS, levels = 1:8)
Leuven.data$age <- as.numeric(Leuven.data$age)
Leuven.data$pupil <- as.factor(Leuven.data$pupil)
Leuven.data$motor <- as.factor(Leuven.data$motor)
Leuven.data$CT <- factor(Leuven.data$CT, levels = 1:6)
Leuven.data <- data.frame(Leuven.data$age, Leuven.data$motor, Leuven.data$pupil, Leuven.data$CT)
colnames(Leuven.data) <- c("data.age", "data.motor", "data.pupil", "data.CT")
Leuven.predicted.gose <- as.integer(as.vector(predict(model, Leuven.data)))
Leuven.predicted.probabilities <- predict(model, Leuven.data, type="prob")

ProTECT.data$eGOS <- as.factor(ProTECT.data$eGOS)
ProTECT.data$age <- as.numeric(ProTECT.data$age)
ProTECT.data$pupil <- as.factor(ProTECT.data$pupil)
ProTECT.data$motor <- as.factor(ProTECT.data$motor)
ProTECT.data$CT <- as.factor(ProTECT.data$CT)
ProTECT.data <- data.frame(ProTECT.data$age, ProTECT.data$motor, ProTECT.data$pupil, ProTECT.data$CT)
colnames(ProTECT.data) <- c("data.age", "data.motor", "data.pupil", "data.CT")
ProTECT.predicted.gose <- as.integer(as.vector(predict(model, ProTECT.data)))
ProTECT.predicted.probabilities <- predict(model, ProTECT.data, type="prob")


# NN:

# Uppsala.data <- Uppsala.data$TestSet
# Uppsala.data$motor <- factor(Uppsala.data$motor)
# Uppsala.data$CT <- factor(Uppsala.data$CT)
# Uppsala.data$pupil <- factor(Uppsala.data$pupil)
# 
# 
# TestdummyVars <- dummyVars(~ motor + pupil + CT, data = Uppsala.data)
# Testdata_onehot <- as.data.frame(predict(TestdummyVars, newdata = Uppsala.data))
# Testage <- scale(Uppsala.data$age)
# Testage <- data.frame(Testage)                  
# test.x <- as.matrix(cbind(Testdata_onehot, Testage))
# str(test.x)
# Uppsala.predicted.gose <- apply(predict(model, test.x), 1, which.max)
# Uppsala.predicted.probabilities <- as.matrix(predict(model, test.x))
# colnames(Uppsala.predicted.probabilities) <- c("1", "2", "3", "4", "5", "6", "7", "8")
# 
# 
# Leuven.data$motor <- factor(Leuven.data$motor, levels = 1:6)
# Leuven.data$CT <- factor(Leuven.data$CT, levels = 1:6)
# Leuven.data$pupil <- factor(Leuven.data$pupil, levels = 1:3)
# TestdummyVars.L <- dummyVars(~ motor + pupil + CT, data = Leuven.data)
# Testdata_onehot.L <- as.data.frame(predict(TestdummyVars.L, newdata = Leuven.data))
# Test.L.age <- scale(Leuven.data$age)
# Test.L.age <- data.frame(Test.L.age)                  
# test.x.L <- as.matrix(cbind(Testdata_onehot.L, Test.L.age))
# str(test.x.L)
# Leuven.predicted.gose <- apply(predict(model, test.x.L), 1, which.max)
# Leuven.predicted.probabilities <- as.matrix(predict(model, test.x.L))
# colnames(Leuven.predicted.probabilities) <- c("1", "2", "3", "4", "5", "6", "7", "8")
# 
# ProTECT.data$motor <- factor(ProTECT.data$motor, levels = 1:6)
# ProTECT.data$CT <- factor(ProTECT.data$CT, levels = 1:6)
# ProTECT.data$pupil <- factor(ProTECT.data$pupil, levels = 1:3)
# TestdummyVars.P <- dummyVars(~ motor + pupil + CT, data = ProTECT.data)
# Testdata_onehot.P <- as.data.frame(predict(TestdummyVars.P, newdata = ProTECT.data))
# Test.P.age <- scale(ProTECT.data$age)
# Test.P.age <- data.frame(Test.P.age)                  
# test.x.P <- as.matrix(cbind(Testdata_onehot.P, Test.P.age))
# str(test.x.P)
# ProTECT.predicted.gose <- apply(predict(model, test.x.P), 1, which.max)
# ProTECT.predicted.probabilities <- as.matrix(predict(model, test.x.P))
# colnames(ProTECT.predicted.probabilities) <- c("1", "2", "3", "4", "5", "6", "7", "8")


################ Evaluating predictions
source("EvaluatePredictions.R")

Uppsala.evaluation <- EvaluatePredictions(predicted.gose = Uppsala.predicted.gose, observed.gose = Uppsala.observed.gose, predicted.probabilities = NULL)
ET.U <- Uppsala.evaluation$EvaluationTable
row.names(ET.U)[1] <- "Uppsala"

Leuven.evaluation <- EvaluatePredictions(predicted.gose = Leuven.predicted.gose, observed.gose = Leuven.observed.gose, predicted.probabilities = NULL)
ET.L <- Leuven.evaluation$EvaluationTable
row.names(ET.L)[1] <- "Leuven"

ProTECT.evaluation <- EvaluatePredictions(predicted.gose = ProTECT.predicted.gose, observed.gose = ProTECT.observed.gose, predicted.probabilities = NULL)
ET.P <- ProTECT.evaluation$EvaluationTable
row.names(ET.P)[1] <- "ProTECT"

library(crfsuite)
crf.U <- crf_evaluation(pred = Uppsala.predicted.gose, obs = Uppsala.observed.gose)
Uppsala.evaluation <- crf.U$overall

crf.L <- crf_evaluation(pred = Leuven.predicted.gose, obs = Leuven.observed.gose)
Leuven.evaluation <- crf.L$overall

crf.P <- crf_evaluation(pred = ProTECT.predicted.gose, obs = ProTECT.observed.gose)
ProTECT.evaluation <- crf.P$overall

library(caret)
cm.U <- confusionMatrix(data = factor(Uppsala.predicted.gose, levels = 1:8), reference = factor(Uppsala.observed.gose))
Uppsala.evaluation2 <- cm.U$byClass
rownames(Uppsala.evaluation2) <- paste0("Uppsala_", rownames(Uppsala.evaluation2))
Uppsala.evaluation2

cm.L <- confusionMatrix(data = factor(Leuven.predicted.gose, levels = 1:8), reference = factor(Leuven.observed.gose, levels = 1:8))
Leuven.evaluation2 <- cm.L$byClass
rownames(Leuven.evaluation2) <- paste0("Leuven_", rownames(Leuven.evaluation2))

cm.P <- confusionMatrix(data = factor(ProTECT.predicted.gose, levels = 1:8), reference = factor(ProTECT.observed.gose))
ProTECT.evaluation2 <- cm.P$byClass
rownames(ProTECT.evaluation2) <- paste0("ProTECT_", rownames(ProTECT.evaluation2))


Evaluation.table.basic <- rbind(ET.U, ET.L, ET.P)
Evaluation.table.basic
write.table(Evaluation.table.basic, file="Results/NewRF.csv", sep = ",", row.names = TRUE)

Evaluation.table.2 <- rbind(Uppsala.evaluation, Leuven.evaluation, ProTECT.evaluation)
Evaluation.table.2
write.table(Evaluation.table.2, file="Results/NewRF2.csv", sep = ",", row.names = TRUE)

Evaluation.table.3 <- rbind(Uppsala.evaluation2, Leuven.evaluation2, ProTECT.evaluation2)
Evaluation.table.3
write.table(Evaluation.table.3, file="Results/NewRF3.csv", sep = ",", row.names = TRUE)

############### Creating evaluation graphs
source("CreateEvaluationGraphs.R")
library(ggplot2)

Uppsala.graphs <- CreateEvaluationGraphs(predicted.gose = Uppsala.predicted.gose,
                                         observed.gose = Uppsala.observed.gose,
                                         plot.graphs = F)
Uppsala.graphs
ggsave("results/NewRF-U-confusion matrix.png", Uppsala.graphs$ConfusionMatrix)
ggsave("results/NewRF-U-CategoryProportion.png", Uppsala.graphs$CategoryProportionGraph)
ggsave("results/NewRF-U-ErrorDistribution.png", Uppsala.graphs$ErrorDistributionGraph)

Leuven.graphs <- CreateEvaluationGraphs(predicted.gose = Leuven.predicted.gose,
                                        observed.gose = Leuven.observed.gose,
                                        plot.graphs = F)
Leuven.graphs
ggsave("results/NewRF-L-confusion matrix.png", Leuven.graphs$ConfusionMatrix)
ggsave("results/NewRF-L-CategoryProportion.png", Leuven.graphs$CategoryProportionGraph)
ggsave("results/NewRF-L-ErrorDistribution.png", Leuven.graphs$ErrorDistributionGraph)

ProTECT.graphs <- CreateEvaluationGraphs(predicted.gose = ProTECT.predicted.gose,
                                         observed.gose = ProTECT.observed.gose,
                                         plot.graphs = F)
ProTECT.graphs
ggsave("results/NewRF-P-confusion matrix.png", ProTECT.graphs$ConfusionMatrix)
ggsave("results/NewRF-P-CategoryProportion.png", ProTECT.graphs$CategoryProportionGraph)
ggsave("results/NewRF-P-ErrorDistribution.png", ProTECT.graphs$ErrorDistributionGraph)

############## Creating Calibration plots
source("CreateCalibrationPanel.R")
CreateCalibrationPanelU <- CreateCalibrationPanel(observed.gose = Uppsala.observed.gose, predicted.probabilities = Uppsala.predicted.probabilities, pdf.file.name = "results/NewRF-U-calibrationplot.pdf")
CreateCalibrationPanelL <- CreateCalibrationPanel(observed.gose = Leuven.observed.gose, predicted.probabilities = Leuven.predicted.probabilities, pdf.file.name = "results/NewRF-L-calibrationplot.pdf")
CreateCalibrationPanelP <- CreateCalibrationPanel(observed.gose = ProTECT.observed.gose, predicted.probabilities = ProTECT.predicted.probabilities, pdf.file.name = "results/NewRF-P-calibrationplot.pdf")

########################## AUROC
source("AUROC.R")

AUROCUppsala <- AUROC(Uppsala.predicted.probabilities, Uppsala.observed.gose)
AUROCLeuven <- AUROC(Leuven.predicted.probabilities, Leuven.observed.gose)
AUROCProTECT <- AUROC(ProTECT.predicted.probabilities, ProTECT.observed.gose)
AUROCtable <- cbind(AUROCUppsala, AUROCLeuven, AUROCProTECT)
write.table(AUROCtable, file="results/NewRF-AUROC.csv", sep = ",", row.names = TRUE)

library(ggplot2)
library(cowplot)
library(randomForest)

data <- readRDS("Uppsala.data.RDS")

train.data <- data$TrainingSet
test.data <- data$TestSet

train.data$eGOS <- as.factor(train.data$eGOS)

train.data$age <- as.numeric(train.data$age)
train.data$pupil <- as.factor(train.data$pupil)
train.data$motor <- as.factor(train.data$motor)
train.data$CT <- as.factor(train.data$CT)

test.data$eGOS <- as.factor(test.data$eGOS)

test.data$age <- as.numeric(test.data$age)
test.data$pupil <- as.factor(test.data$pupil)
test.data$motor <- as.factor(test.data$motor)
test.data$CT <- as.factor(test.data$CT)

str(data)
str(train.data)
str(test.data)

set.seed(0)

########################### Creating the model
model <- randomForest(eGOS ~., data=train.data, ntree=500, mtry=1, proximity=TRUE)
# ntree = number of trees in model, default=500
# mtry = number of variables at each split, default=sqrt of input variables
saveRDS(model, file="RF.RDS")
model

######################################### MSE / MAE
y.test <- as.numeric(test.data$eGOS)
predicted.egos <- as.numeric(predict(model, test.data))

MSE <- mean((y.test - predicted.egos)^2)
MAE <- mean(abs(y.test - predicted.egos))
MSE
MAE


######################### Classifying error rate
# model$err.rate <- error rate of each decision tree / outcome
oob.error.data <- data.frame(
  Trees=rep(1:nrow(model$err.rate), time=3),
  Type=rep(c("OOB", "1", "2", "3", "4", "5", "6", "7", "8"), each=nrow(model$err.rate)),
  Error=c(model$err.rate[, "OOB"],
          model$err.rate[, "1"],
          model$err.rate[, "2"],
          model$err.rate[, "3"],
          model$err.rate[, "4"],
          model$err.rate[, "5"],
          model$err.rate[, "6"],
          model$err.rate[, "7"],
          model$err.rate[, "8"]))

######################## Plotting the error rates data
ggplot(data=oob.error.data, aes(x=Trees, y=Error)) +
  geom_line(aes(color=Type))

######################## Modifying the forest ################################################################

######## Changing the number of trees in model (ntree= X), default = 500

######## Changing the number of variables at each split (mtry=x), default=sqrt of input variables ###


######## Code for checking the mtry value with the least error rate:
oob.values <- vector(length=10)
for(i in 1:10) {
  temp.model <- randomForest(eGOS ~ ., data=train.data, mtry=i, ntree=500)
  oob.values[i] <- temp.model$err.rate[nrow(temp.model$err.rate),1]
}
head(oob.values)
which.min(oob.values)
